package\s*(\w*\.)*(\w*\.\*)+; :: // package $1
package\s*(?:\w*\.)*([^;]+)(\.\*)?; :: // package $1
import\s*(?:\w*\.)*([^;]+); :: import "$1"
throw\s*new\s*(\w*)\s*\(\s*("[^"]*")\); :: panic($1{$2})
((?:(?:public|private|virtual|protected|abstract|final)\s*)+)\s*(\S*)\s*([^;]+); :: $3 $2 // $1
((?:(?:public|private|abstract|final)\s*)*)(?P<indent>\s*)class\s*(?P<ClassName>\w+)\s*(\([^)]*\))?\s*(\w*\s*\w*)?\s*{ :: type $ClassName struct { // $1 ss\n    $5  $4
(?P<indentNew>\s*public|protected)\s*{ClassName}\s*\(([^)]*)?\)\s*{ :: {indent}func New{ClassName} ($2) *{ClassName} {  // $1 ss \n    ref := &{ClassName}{
(?P<indent>\s*)} :: }\n{indent}
((?:(?:public|private|virtual|protected|abstract|final|override|event|static)\s)+)\s*(\w*)?\s*{ClassName}\s*\(([^)]*)?\)\s*{ :: func (ref *{ClassName}) $2($3) { // $1 ss
((?:(?:public|private|virtual|protected|abstract|final|override|event|static)\s)+)\s*(static)?\s*{ClassName}\s*(\w*)\s*\(([^)]*)?\)\s*{ :: func (ref *{ClassName}) $4($5) $3 { // $1 $2
((?:(?:public|private|virtual|protected|abstract|final|override|event|static)\s)+)\s*(\S*)?\s*(\w*)?\s*\(([^)]*)?\)\s*{ :: func (ref *{ClassName}) $3($4) $2 { // $1 ss
for\(int\s*(\w*)\s*=\s*(\d*);([^)]*)\) :: for $1 := $2; #3 {
(for\(\s*;\s*;\s*\))|while :: for true {
if\s*(\S*)\s*is\s*None\s*: :: if $1 == nil {
if\s*(\w*)\s*is\s*not\s*None: :: if $1 != nil {
if\s*(\w*)\s*in([^:]*): :: if val, ok := $2[$1]; ok {
if\s*(\w*)\s*not in([^:]*): :: if val, ok := $2[$1]; !ok {
if([^:]*): :: if $1 {
else\s*:   :: } else {
(try|catch) :: // $1
(\s*)var\s*(\w*)\s*=\s*([\S]*)\s*\?{2}\s*([^;]*); :: $1$2 := $3 \n${1}if $2 == nil {\n$1    $2 = $3 \n${1}}
(\s*)return\s*\s*([\S]*)\s*\?{2}\s*([^;]*) :: ${1}if $2 != nil {\n$1    return $2 \n${1}}\n\n${1}return $3

#general rules
null :: nil
^\s*(@property|@abstractmethod|@staticmethod|@Override|@Test|@FunctionalInterface)$  :: // $1
@NotNull :: /*$1*/
void :: \s
;$  :: \s
\bstring\. :: strings.
\b_*(\w*) :: $1
this :: ref
\bString\b :: string
\bInteger\b :: int
\bboolean\b :: bool
new\s+(\w+)\( :: New$1(
new\s{ClassName}\( :: New{ClassName}(
func([^(]*)\((?:(?:(final)\s(\w*))*)\s*([^),]*)\)\s*(\S*)?\s*{  :: func$1($4 /*$2*/ $3)$5{
#func\s*New{ClassName}\s*\(((\w+)\s*(\w+)*)\)\s*{ :: func New{ClassName} ( forgroup($2,$1) ){
\b(\w*)\s*\[\] :: []$1
double :: float64
(extends|implements)\s*(\S*) :: $2 // $1




