from\s*([\w.]*)\s*import\s*([\w,\s]*) :: import "$1 $2"
class\s*(?P<ClassName>\w*)\s*\((\w*)\): :: {indent}type $ClassName struct {\n    $2
(?P<indent>\s*)def\s*(\w*)\((?:self,?\s?)?([^)]*)\): :: {indent}${1}func (ref *{ClassName}) $2($3) {
if\s*(\w*)\s*is\s*None: :: if $1 == nil {
if\s*(\w*)\s*is\s*not\s*None: :: if $1 != nil {
raise\s*(\w*) :: panic(errors.New("$1"))
^# :: //
#general rules
^\s*(@property|@abstractmethod|@staticmethod|super.*|object)$  :: // $1
\bobject\b :: \s
\bself\._* :: ref.
\bTrue\b     ::  true
\bFalse\b     ::  false
\.format\( :: fmt.Sprintf(
__init__\( :: New{ClassName}(
""" :: `
\b(\w*)=None([,)]) :: $1 string$2
{" :: map[string] interface{} {"
": None :: ": nil
pass :: }


